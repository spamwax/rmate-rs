name: Reusable workflow for linux

on:
  workflow_call:
    inputs:
      target:
        required: true
        type: string
      arm:
        type: boolean
        default: false
      build_type:
        type: string
        default: 'debug'
      run_tests:
        type: boolean
        default: true

env:
  ARM: ${{ inputs.arm }}
  TARGET: ${{ inputs.target }}
  BUILD_TYPE: ${{ inputs.build_type }}
  RELEASE_COMMIT: ${{ github.ref_type == 'tag' }}

jobs:
  build_binary:
    name: rust-${{ matrix.rust }} (${{ inputs.build_type }})
    strategy:
      matrix:
        os: [ubuntu-latest]
        rust: [stable]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Install pcregrep
        run: |
          sudo apt-get update
          sudo apt-get install -y pcregrep
      - name: Install arm compilers
        if: ${{ inputs.arm }}
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu gcc-arm-linux-gnueabihf
      - name: Install multilib compiler
        if: ${{ inputs.target == 'i686-unknown-linux-gnu' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-multilib
      - name: Install arm runner
        if: ${{ inputs.arm && inputs.run_tests }}
        run: |
          sudo apt-get install -y libc6-dev-armhf-cross qemu-user-static
          sudo apt-get install -y libc6-dev-arm64-cross

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ inputs.target }}
          override: true

      - name: Build binary (debug)
        if: ${{ inputs.build_type == 'debug' }}
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --target ${{ inputs.target }}
      - name: Build binary (release)
        if: ${{ inputs.build_type == 'release' }}
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --target ${{ inputs.target }} --release
      - name: Run test
        if: ${{ inputs.run_tests }}
        run: .github/workflows/run_test.sh

      - name: Prepare release artifact
        if: ${{ github.ref_type == 'tag' && matrix.rust == 'stable' }}
        run: |
          .github/workflows/prepare_artifact.sh

      - name: Upload for release
        id: upload_artifact
        uses: actions/upload-artifact@v2
        if: ${{ github.ref_type == 'tag' && matrix.rust == 'stable' }}
        with:
          name: binary-artifact-${{ inputs.target }}
          path: |
            rmate_${{ inputs.target }}.tar.gz
          if-no-files-found: warn
