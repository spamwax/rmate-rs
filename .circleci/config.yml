version: 2.1

jobs:
  linux:
    parameters:
      target:
        type: string
      rust:
        type: string
        default: 1.61.0
      build_type:
        type: string
        default: "debug"
      image:
        type: string
        default: "cimg/rust:1.61.0"
    docker:
      - image: "<< parameters.image >>"
      # - image: circleci/rust:1.54.0-bullseye
    environment:
      TARGET: "<< parameters.target >>"
      BUILD_TYPE: "<< parameters.build_type >>"
      RUST_BACKTRACE: "1"
      CIRCLE_OS_NAME: linux
      CIRCLE_TEST: "false"
    steps:
      # - run:
      #     name: Install Dependencies
      #     command: |
      #         # sh -c 'echo "deb http://deb.debian.org/debian stretch-backports main" > /etc/apt/sources.list.d/backports.list'
      #         apt-get update
      #         apt-get clean
      #         apt-get install curl git bash build-essential make binutils -y
      #         rm -r /var/lib/apt/lists/*
      # - run:
      #     name: Install Rust "<< parameters.rust >>"
      #     command:
      #       curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain << parameters.rust >>
      - run:
          name: Install arm/gcc stuff
          command: |
            sudo apt-get update
            sudo apt-get install -y gcc-aarch64-linux-gnu gcc-arm-linux-gnueabihf
            if [ $TARGET = "i686-unknown-linux-gnu" ]; then
                sudo apt-get install -y gcc-multilib
            fi
      - run:
          name: Add Rust Components
          command: |
            source /home/circleci/.cargo/env || true
            rustup component add clippy rustfmt
            rustup target add $TARGET
            rustc --version; cargo --version; rustup --version
      - checkout
      - run:
          name: Build
          command: |
            .circleci/script.sh
      - persist_to_workspace:
          root: /home/circleci
          paths:
            - project
  tests:
    parameters:
      target:
        type: string
      rust:
        type: string
        default: 1.61.0
      image:
        type: string
        default: hamiid/circleci-rust:latest
    docker:
      # - image: circleci/rust:stretch
      - image: "<< parameters.image >>"
    environment:
      RUST_BACKTRACE: "1"
      TARGET: "<< parameters.target >>"
      CIRCLE_TEST: "true" # change to false to disable tests
      PROJECT_BUILD_WORKSPACE: /tmp/apr
      CIRCLE_OS_NAME: linux
    steps:
      # - checkout
      - attach_workspace:
         at: /tmp/rmate
      - run:
          name: Attched?
          command: |
            ls /tmp/rmate/project
      - run:
          name: Run Tests
          command: |
            cd /tmp/rmate/project
            export EXEC=target/$TARGET/debug/rmate
            export working_dir=$(pwd)
            .circleci/script.sh $EXEC $working_dir

  deploy:
    description: Deploy to Github from a linux container
    parameters:
      target:
        type: string
    docker:
      # - image: circleci/rust:stretch
      - image: cimg/rust:1.61.0
    environment:
      TARGET: "<< parameters.target >>"
      CIRCLECI_TEST: "false"
      CIRCLE_OS_NAME: linux
      GHRELEASER_VERSION: v0.13.0
    steps:
      - attach_workspace:
          at: /tmp/rmate
      - run:
          name: Deploy using ghr
          command: |
            cd /tmp/rmate/project
            export VERSION=${CIRCLE_TAG}
            .circleci/before_deploy.sh
            .circleci/deploy.sh

  arm_runner:
    docker:
      # - image: circleci/rust:1.54.0-bullseye
      - image: cimg/rust:1.61.0

    environment:
      RUST_BACKTRACE: "1"
      CIRCLE_OS_NAME: linux
      TARGET: "<< parameters.target >>"
      QEMU_STATIC_RUNNER: "<< parameters.qemu_runner >>"
    parameters:
      target:
        type: string
      qemu_runner:
        type: string
    steps:
      - run:
          name: Update apt-get
          command: |
            sudo apt-get update
      - run:
          name: Install arm gcc stuff
          command: |
            sudo apt-get install -y gcc-aarch64-linux-gnu gcc-arm-linux-gnueabihf
            sudo apt-get install -y libc6-dev-armhf-cross qemu-user-static
            sudo apt-get install -y libc6-dev-arm64-cross
      - checkout
      - run:
          name: Build
          command: |
            rustup target add "<< parameters.target >>"
            cargo build --target $TARGET
      - run:
          name: Use qemu-user-static to run rmate
          command: |
            if [ $TARGET = "aarch64-unknown-linux-gnu" ]; then
                export LD_LIBRARY_PATH=/usr/aarch64-linux-gnu/lib64
                qemu-aarch64-static -L /usr/aarch64-linux-gnu target/aarch64-unknown-linux-gnu/debug/rmate -vvv -w Cargo.toml 2>output.log || echo
            else
                export LD_LIBRARY_PATH=/usr/arm-linux-gnueabihf/lib
                qemu-arm-static -L /usr/arm-linux-gnueabihf target/armv7-unknown-linux-gnueabihf/debug/rmate -vvv -w Cargo.toml 2>output.log || echo
            fi
            grep "Error: \"Connection refused (os error" ./output.log
            echo && cat output.log
      # - setup_remote_docker
      # - run:
      #     name: Pull correct arm/debian images
      #     command: |
      #       sleep 10
      #       if [ $TARGET = "aarch64-unknown-linux-gnu" ]; then
      #           docker pull arm64v8/debian:stretch-slim
      #       else
      #           docker pull arm32v7/debian:stretch-slim
      #       fi
      # - run:
      #     name: Run under qemu
      #     command: |
      #       cp /usr/bin/qemu-arm-static .
      #       cp /usr/bin/qemu-aarch64-static .
      #       cp target/$TARGET/debug/rmate .
      #       file ./rmate
      #       docker build -f Dockerfile-<< parameters.target >> -t 'arm_rust:testing' .
      #       echo && echo "Running rmate binary for << parameters.target >>"
      #       docker run --rm 'arm_rust:testing' 2>output.log || echo
      #       grep "Error: \"Connection refused (os error" ./output.log
      #       echo && cat output.log

  macosimage:
    parameters:
      release:
        type: boolean
        default: false
      rust:
        type: string
        default: 1.61.0
    macos:
      xcode: "11.7"
    environment:
      RUST_BACKTRACE: "1"
      TARGET: x86_64-apple-darwin
      CIRCLE_OS_NAME: macos
      GHRELEASER_VERSION: v0.13.0
    steps:
      - run:
          name: "Install Rust"
          command: |
            sudo mkdir -p /opt
            curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain << parameters.rust >>
            sudo ln -s ~/.cargo/bin/* /usr/local/bin
      - run:
          name: Rust Version
          command: rustc --version; cargo --version; rustup --version
      - unless:
          condition: << parameters.release >>
          steps:
            - checkout
            - run:
                name: Build Debug
                command: |
                  .circleci/script.sh
            - run:
                name: Running macOS Tests
                command: |
                    export CIRCLE_TEST=true
                    export APR_EXEC=./target/$TARGET/debug/rmate
                    export working_dir=$(pwd)
                    .circleci/script.sh $APR_EXEC $working_dir
      - when:
          condition: << parameters.release >>
          steps:
            - checkout
            - run:
                name: Building Release
                command: |
                    export BUILD_TYPE=release
                    .circleci/script.sh
            - run:
                name: Building Artifact
                command: .circleci/before_deploy.sh
            - run:
                name: Deploying to Github
                command: |
                  export CIRCLE_TEST=false
                  export VERSION=${CIRCLE_TAG}
                  .circleci/deploy.sh

workflows:
  version: 2.1

  linux_i386:
    jobs:
      - linux:
          name: Linux-32bit
          target: i686-unknown-linux-gnu
          # image: hamiid/rust-i386
          build_type: release
          filters:
            tags:
              only: /v?[0-9]+.*/
            branches:
              ignore: /.*/
      - deploy:
          name: Linux-32bit-deploy
          target: i686-unknown-linux-gnu
          requires:
            - Linux-32bit
          filters:
            tags:
              only: /v?[0-9]+.*/
            branches:
              ignore: /.*/

  linux_arm:
    jobs:
      - linux:
          name: armv7-hf-release
          target: armv7-unknown-linux-gnueabihf
          build_type: release
          filters:
            tags:
              only: /v?[0-9]+.*/
            branches:
              ignore: /.*/
      - deploy:
          name: armv7-deploy
          target: armv7-unknown-linux-gnueabihf
          requires:
            - armv7-hf-release
          filters:
            tags:
              only: /v?[0-9]+.*/
            branches:
              ignore: /.*/
      - arm_runner:
          name: armv7-runner
          target: armv7-unknown-linux-gnueabihf
          qemu_runner: qemu-arm-static
          filters:
            branches:
              only: /.*/
            tags:
              ignore: /v?[0-9]+.*/

  linux_aarch64:
    jobs:
      - linux:
          name: aarch64-release
          target: aarch64-unknown-linux-gnu
          build_type: release
          filters:
            tags:
              only: /v?[0-9]+.*/
            branches:
              ignore: /.*/
      - deploy:
          name: aarch64-deploy
          target: aarch64-unknown-linux-gnu
          requires:
            - aarch64-release
          filters:
            tags:
              only: /v?[0-9]+.*/
            branches:
              ignore: /.*/
      - arm_runner:
          name: aarch64-runner
          target: aarch64-unknown-linux-gnu
          qemu_runner: qemu-aarch64-static
          filters:
            branches:
              only: /.*/
            tags:
              ignore: /v?[0-9]+.*/



  linux_x86_64:
      jobs:
        - linux:
            name: Linux-64bit
            target: x86_64-unknown-linux-gnu
            filters:
              branches:
                only: /.*/
              tags:
                ignore: /v?[0-9]+.*/
        - tests:
            name: Linux-64bit-test
            target: x86_64-unknown-linux-gnu
            filters:
              branches:
                only: [master, develop]
              tags:
                ignore: /v?[0-9]+.*/
            requires:
              - Linux-64bit
        - linux:
            name: Linux-64bit-release
            target: x86_64-unknown-linux-gnu
            build_type: release
            filters:
              tags:
                only: /v?[0-9]+.*/
              branches:
                ignore: /.*/
        - deploy:
            name: deploy-linux_x86_64
            target: x86_64-unknown-linux-gnu
            filters:
              tags:
                only: /v?[0-9]+.*/
              branches:
                ignore: /.*/
            requires:
              - Linux-64bit-release

  build-n-test-macos:
    jobs:
      - macosimage:
          name: macOS-64bit
          filters:
            branches:
              only: [master, develop]

  deploy-to-github:
    jobs:
      - macosimage:
          name: macOS-64bit-release
          release: true
          filters:
            tags:
              only: /v?[0-9]+.*/
            branches:
              ignore: /.*/

      # - deploy:
      #     name: Deploy to Github
      #     release: true
      #     requires:
      #       - macOS-64bit-release
      #     filters:
      #       tags:
      #         only: /v?[0-9]+.*/
      #       branches:
      #         ignore: /.*/

